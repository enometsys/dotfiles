#!/bin/sh

# Programs

## Display
# - `xf86-video-intel`, `mesa` for graphics support
# - `xorg-server`, `xorg-xrandr` for rendering the x system
# - `xorg-xinit` for starting the window manager
# - `xorg-xsetroot` used by dwm to render statusbar
# - `mesa-demos` used to test 3d rendering/gpu support (glxgears)
# - `xorg-fonts`, `ttf-dejavu` used to render most fonts
# - `xautolock` used for locking screen when inactive
# - `cowsay` `fortune-mod` used to generate graphics in lock screen

## Audio system
# - `alsa-utils` low-level utilities to manage audio devices
# - `pulseaudio-alsa`, `pulseaudio-bluetooth`, `pulseaudio-jack` higher level utility to manage audio devices
# - `pavucontrol` frontend to pulseaudio

## Inputs
# - `libnotify` `dunst` used to create/render desktop notifications
# - `libinput`, `xbindkeys` used to bind actions in keyboard input
# - `xdotool` used to simulate keyboard input

## Power managment
# - `acpilight` used to control keyboard backlight
# - `acpi` used for power mgt, specifically to query battery status
# - `powertop`, `thermald`, `cpupower` used to query and somewhat control machine status/power/cpu
# - `tlp`, `tlp-rdw` used for automatic power mgt for laptops

## Network managment
# - `networkmanager` used to manage network profiles/interfaces
# - `ufw` uncomplicated firewall
# - `wget`, `curl`, `aria2` utility to download files from the network
# - `rsync` used to move files around (event w/in a network)
# - `openssh` ssh package

## Security
# - `pass` password management using GPG
# - `yubikey-manager` utility to managing yubikeys

## Bluetooth
# - `bluez` bluetooth driver
# - `bluez-utils` cli bluetooth frontend
# - `blueman` GUI bluetooth frontend

## File system
# - `xdg-user-dirs` utility to create XDG directorys in a user's home directory
# - `nautilus` GUI file manager. TODO: remove after mastering nnn
# - `udisks2`, `udevil` driver and utilities to mount removable devices
# - `gvfs-mtp` utility to integrate mtp to file managers (together with jmtpfs, will enable mtp connection)
# - `exfat-utils`, `ntfs-3g` utilities for managing windows file system (for dual boot and external harddrives)
# - `ripgrep`, `fd` utility more convinient than `coreutils/find`
# - `nnn` terminal-based file manager

## Terminal Utilities
# - `zsh`, `zsh-completions` better altenative to bash
# - `jq`, `yq` cli utility for managing json and yaml
# - `tree` for rendeding directory tree as a tree (alternative to ls)
# - `tar`, `unrar`, `unzip` utilities for managing compressed files
# - `neovim` main file editor (will be set as both $EDITOR and $VISUAL)
# - `bat` better `coreutils/cat` alternative
# - `glib2` provides `gio trash` that is used by file managers (nnn)
# - `htop` better `procps-ng/top` alternative
# - `neofetch` for displaying system specs
# - `man-db`, `man-pages` for managing man pages
# - `xclip` for managing clipboard
# - `tmux` terminal multiplexer
# - `bc` calculator

## Media
# - `scrot` for creating screen shots
# - `feh` for rendering/viewing images
# - `vlc` for playing videos
# - `viu` for rendering images in terminal
# - `zbar` for decoding qrcodes from different inputs (camera or file)
# - `qrencode` for encoding files to QR code
# - `zathura`, `zathura-pdf-mupdf` for viewing pdf, epubs

## Development
# - `git` VCS
# - `github-cli` terminal-based workflow in github
# - `docker` for container managment
# - `go` golang cli
# - `yarn` alternative nodejs package manager to npm
# - `kubectl`, `kubectx` terminal interface to k8s clusters


# install packages using pacman (run as root)
if type pacman  > /dev/null; then
  echo "Installing system packages using pacman..."
  pacman -Syu --noconfirm \
    xf86-video-intel mesa  \
    xorg-server xorg-xrandr xorg-xsetroot xorg-xinit \
    mesa-demos \
    acpi acpilight \
    powertop thermald cpupower \
    tlp tlp-rdw \
    xorg-fonts ttf-dejavu \
    xautolock cowsay fortune-mod \
    libnotify dunst \
    xbindkeys libinput xdotool \
    networkmanager ufw \
    wget curl aria2 \
    rsync \
    alsa-utils \
    pulseaudio-alsa pulseaudio-bluetooth pulseaudio-jack pavucontrol \
    openssh \
    pass \
    yubikey-manager \
    bluez bluez-utils blueman \
    xdg-user-dirs \
    nautilus udisks2 udevil gvfs-mtp \
    exfat-utils ntfs-3g \
    ripgrep fd jq yq tree \
    tar unrar unzip \
    neovim \
    zathura zathura-pdf-mupdf \
    bat \
    glib2 \
    htop neofetch man-db man-pages \
    zsh zsh-completions xclip tmux \
    nnn bc \
    scrot feh vlc viu zbar qrencode \
    git github-cli docker \
    go yarn \
    kubectl kubectx

  # check for supported cameras
  # v4l2-ctl --list-devices
  # use camera to scan qr
  # zbarcam -1 --nodisplay

  # enable and start pcscd.socket (included by yubikey-manager>ccid>pcsclite package)
  # to support yubikey's CCID (smart card) mode
  # pcscd.socket and not pcscd.service is enabled so as to activate it only when needed
  systemctl enable --now pcscd.socket

  # enable and start - NetworkManager
  systemctl enable --now NetworkManager

  # enable and start - Bluetooth
  systemctl enable --now bluetooth

  # configure brightness control
  if [ ! -f /etc/X11/xorg.conf.d/20-intel.conf ]; then
    echo "Configuring intel brigtness control"
    tee /etc/X11/xorg.conf.d/20-intel.conf <<EOF
Section "Device"
	Identifier  "Intel Graphics"
	Driver      "intel"
	Option      "Backlight"  "intel_backlight"
EndSection
EOF
  fi

  # configure touchpad settings
  if [ ! -f /etc/X11/xorg.conf.d/30-touchpad.conf ]; then
    echo "Configuring intel brigtness control"
    tee /etc/X11/xorg.conf.d/30-touchpad.conf <<EOF
Section "InputClass"
	Identifier "touchpad"
	Driver "libinput"
	MatchIsTouchpad "on"
	Option "Tapping" "on"
	Option "ClickMethod" "clickfinger"
	Option "NaturalScrolling" "true"
EndSection
EOF
  fi

  # configure powersaving
  systemctl enable --now thermald
  systemctl enable --now tlp

  # mask rfkill for tlp-rdw to work properly
  systemctl mask systemd-rfkill.service
  systemctl mask systemd-rfkill.socket
fi
